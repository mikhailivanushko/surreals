#ifndef SURREALS_SURREALS_H
#define SURREALS_SURREALS_H

#include <algorithm>
#include <cmath>
#include <functional>
#include <iostream>
#include <limits>
#include <map>
#include <set>
#include <stdexcept>
#include <string>

namespace surreals {

    /// forward declarations
    class Surreal; /// the Surreal class
    class SurrealInf; /// the "infinite" Surreal class

    /// A class representing surreal numbers with finite left and right sets.
    class Surreal {
    public:
        /// Each "side" of the Surreal is an std::set of Surreals.
        std::set<Surreal> left;
        std::set<Surreal> right;
        /// TODO: it would be more memory efficient to handle sets of pointers to Surreals
        /// instead of storing them by value.

        /// After an arithmetic operation is finished, the result is stored
        /// in a lookup table for later use. Each table is an std::map,
        /// with keys being pairs of Surreals (rand & rator), and values being the resulting Surreal.
        static std::map<std::pair<Surreal, Surreal>, Surreal> AddLookup;
        static std::map<std::pair<Surreal, Surreal>, Surreal> MultLookup;

        /// Constructors
        Surreal(std::set<Surreal> const &leftIn,
                std::set<Surreal> const &rightIn,
                bool simplify);

        Surreal();

        Surreal(Surreal const &other);

        Surreal(Surreal const &sur_left, Surreal const &sur_right);

        explicit Surreal(int const &input);

        explicit Surreal(float const &input);

        explicit Surreal(SurrealInf &inputSurInf);

        /// Destructor
        ~Surreal();

        /// Depth of the number
        std::size_t Depth() const;

        /// In-place Arithmetic

        Surreal &operator+=(Surreal const &other);

        Surreal &operator-=(Surreal const &other);

        Surreal &operator*=(Surreal const &other);

        /// unary minus (negation)
        Surreal operator-() const;

        /// float conversion
        float Float() const;

        operator float();

        /// verbose display
        std::string PrintVerbose() const;

        /// hybrid display
        std::string Print(int depth) const;

    };

    /// Arithmetic between Surreals
    Surreal operator+(Surreal const &a, Surreal const &b);

    Surreal operator-(Surreal const &a, Surreal const &b);

    Surreal operator*(Surreal const &a, Surreal const &b);

    Surreal operator/(Surreal const &a, Surreal const &b);

    /// Arithmetic between sets of Surreal
    /// set + number
    std::set<Surreal> operator+(std::set<Surreal> const &sur_set, const Surreal &sur_num);

    /// set + set
    std::set<Surreal> operator+(std::set<Surreal> const &sur_set1, std::set<Surreal> const &sur_set2);

    /// set * number
    std::set<Surreal> operator*(std::set<Surreal> const &sur_set, const Surreal &sur_num);

    /// set * set
    std::set<Surreal> operator*(std::set<Surreal> const &sur_set1, std::set<Surreal> const &sur_set2);

    /// -set
    std::set<Surreal> NegateSet(std::set<Surreal> const &sur_set);

    /// Ordering between Surreals
    bool operator<=(surreals::Surreal const &a, surreals::Surreal const &b);

    bool operator>=(surreals::Surreal const &a, surreals::Surreal const &b);

    bool operator==(surreals::Surreal const &a, surreals::Surreal const &b);

    bool operator!=(surreals::Surreal const &a, surreals::Surreal const &b);

    bool operator>(surreals::Surreal const &a, surreals::Surreal const &b);

    bool operator<(surreals::Surreal const &a, surreals::Surreal const &b);

    /// A class representing surreal numbers with support for "infinite" sets.
    class SurrealInf {
    public:

        /// Each side of the "infinite" number is a generating function,
        /// accepting an integer and returning a Surreal number.
        ///
        /// It is impossible for the implementation to confirm that all of the numbers generated in the right set
        /// are greater than any generated in the left.
        /// In order for the arithmetic operations to work, it is trusted that:
        ///
        /// 1) the left function accepts all non-negative integers and generates numbers in non-strict ASCENDING order
        /// 2) the right function accepts all non-negative integers and generates numbers in non-strict DESCENDING order
        /// 3) any number generated by the right function is greater than any number generated by the left function
        std::function<SurrealInf(int)> left;
        std::function<SurrealInf(int)> right;

        /// Rather than having an infinite number of terms, one side of SurrealInf might have no terms or
        /// a finite number of terms (for example, Omega has the form { 1, 2, 3, 4, 5, ... | }, and has no terms in R).
        ///
        /// Variables leftSize and rightSize determine how the sides of the SurrealInf are evaluated:
        /// leftSize == -1 : the left set is infinite
        /// leftSize >= 0 : the left set is finite and has size leftSize. if leftSize == 0, the left set is empty.
        int leftSize = 0;
        int rightSize = 0;

        /// When evaluating the generating functions, SurrealInf caches the generated numbers for each side
        /// in std::map, with keys being the integers and values being the generated numbers.
        std::map<int, SurrealInf> leftCache;
        std::map<int, SurrealInf> rightCache;

        /// Constructors
        SurrealInf(std::function<SurrealInf(int)> const &leftIn,
                   std::function<SurrealInf(int)> const &rightIn,
                   std::pair<int, int> const &sizes);

        explicit SurrealInf(Surreal const &inputSur);

        explicit SurrealInf(float const &inputFloat);

        explicit SurrealInf(int const &inputInt);

        SurrealInf();

        /// Destructor
        ~SurrealInf();

        /// Fetch the Nth element from the left set
        SurrealInf getLeft(int const &n);

        /// Fetch the Nth-to-last element from the right set
        SurrealInf getRight(int const &n);

        /// Float conversion
        float Float();

        /// Print verbose display
        std::string PrintVerbose(int width);

        /// Print "hybrid" display
        std::string Print(int width, int depth);

    };
} // surreals

/// iostream display
std::ostream &operator<<(std::ostream &os, surreals::Surreal const &number);

std::ostream &operator<<(std::ostream &os, surreals::SurrealInf &number);

#endif //SURREALS_SURREALS_H